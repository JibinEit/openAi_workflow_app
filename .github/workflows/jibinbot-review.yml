name: "JibinBot – PR Code Review"

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  review:
    name: "Run JibinBot Review"
    runs-on: ubuntu-latest

    steps:
      # ── 1) CHECKOUT THE CODE ────────────────────────────────────────────
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ── 2) SET UP PYTHON ────────────────────────────────────────────────
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # ── 3) INSTALL PYTHON DEPENDENCIES (incl. flake8-json) ─────────────
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai PyGithub flake8 flake8-json

      # ── 4) SET UP NODE & ESLINT ────────────────────────────────────────
      - name: Set up Node 18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Install ESLint
        run: npm install -g eslint

      # ── 5) INSTALL SHELLCHECK ──────────────────────────────────────────
      - name: Install ShellCheck
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck

      # ── 6) INSTALL .NET SDK ────────────────────────────────────────────
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x"

      # ── 7) INSTALL FLUTTER SDK ─────────────────────────────────────────
      - name: Install Flutter SDK (stable channel)
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      # ── 8) PREPARE LINTER-REPORTS FOLDER ───────────────────────────────
      - name: Create linter-reports directory
        run: mkdir -p .github/linter-reports

      # ── 9) RUN ESLINT (JS/TS/React/Angular) ────────────────────────────
      - name: Run ESLint
        run: |
          # Only run if there is at least one .js/.jsx/.ts/.tsx file
          FILES=$(find . -type f \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" \))
          if [ -n "$FILES" ]; then
            eslint '**/*.js' '**/*.jsx' '**/*.ts' '**/*.tsx' \
              --format json \
              --output-file .github/linter-reports/eslint.json || true
          fi

      # ── 10) RUN FLAKE8 (Python) ────────────────────────────────────────
      - name: Run Flake8
        run: |
          # Only run if there is at least one .py file
          FILES=$(find . -type f -name "*.py")
          if [ -n "$FILES" ]; then
            flake8 . --format=json --output-file .github/linter-reports/flake8.json || true
          fi

      # ── 11) RUN SHELLCHECK (Shell scripts) ─────────────────────────────
      - name: Run ShellCheck
        run: |
          # Only run if there is at least one .sh script
          FILES=$(find . -type f -name "*.sh")
          if [ -n "$FILES" ]; then
            find . -type f -name "*.sh" \
              | xargs -I {} sh -c "shellcheck -f json {} 2>/dev/null >> .github/linter-reports/shellcheck.json" || true
          fi

      # ── 12) RUN DART/FLUTTER ANALYZER ─────────────────────────────────
      - name: Run Flutter Analyzer
        run: |
          # Only run if this is a Flutter/Dart project (pubspec.yaml exists)
          FILES=$(find . -type f -name "*.dart")
          if [ -n "$FILES" ]; then
            dart analyze --format=json "$FILES" \
              > .github/linter-reports/dartanalyzer.json || true
          fi

      # ── 13) RUN DOTNET FORMAT (C#/.NET) ────────────────────────────────
      - name: Run dotnet-format
        run: |
          # Only run if there's a .csproj file (C#/.NET project)
          CS_FILES=$(find . -type f -name "*.csproj")
          if [ -n "$CS_FILES" ]; then
            dotnet tool install -g dotnet-format --version 7.* || true
            PATH="$PATH:$HOME/.dotnet/tools"
            dotnet format --verify-no-changes --dry-run --report .github/linter-reports/dotnet-format.json || true
          fi

      # ── 14) RUN THE AI REVIEW SCRIPT ────────────────────────────────────
      - name: Run JibinBot AI review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          python .github/scripts/jibinbot_review.py